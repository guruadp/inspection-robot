##############################################################################
#
# GitGub CI workflow syntax spec:
#    https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# Coveralls example:
#    https://github.com/marketplace/actions/coveralls-github-action
#
##############################################################################

name: Build

on:
  # Triggered whenever push to the master branch
  push:
    branches:
      - master
      - Phase-3

  # Triggered whenever a pull request is created on master
  pull_request:
    branches: ["Phase-3"]
    types: [opened]

  # Allow manual trigger
  workflow_dispatch:

jobs:
  build:
    # Create a container of the latest Ubuntu, other values could be
    # ubuntu-latest, ubuntu-22.04, etc.
    runs-on: ubuntu-20.04

    steps:
      # We want to use GitHub CI checkout version 3 for checking out the branch
      - uses: actions/checkout@v3

      # Install some system pacakges
      - name: Install ROS 2 galactic packages
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt update && sudo apt install -y curl
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
            -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) \
            signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \
            http://packages.ros.org/ros2/ubuntu \
            $(. /etc/os-release && echo $UBUNTU_CODENAME) main" \
            | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update
          sudo apt install -y ros-galactic-ros-base python3-colcon-common-extensions
          sudo apt install -y lcov

      # Install Open CV and dependencies
         - name: Install OpenCV and dependencies
            run: |
              sudo apt install -y g++ cmake make git libgtk2.0-dev pkg-config
              git clone https://github.com/opencv/opencv.git
              mkdir -p build && cd build
              cmake ../opencv
              make -j4
              sudo make install
              
      # Build for test coverage
      - name: Configure CMake flags and build exectables
        run: |
          source /opt/ros/galactic/setup.bash
          colcon build --cmake-args -DCOVERAGE=1 --packages-select inspection-robot
          cat log/latest_build/inspection-robot/stdout_stderr.log
          find build/inspection-robot/ | grep -E 'gcno' # catch error -- exepct to see .gcno files
      # Run unit test and also check c++ code (and others) for style and static coding errors
      - name: Run unit test and check code error
        run: |
          source /opt/ros/galactic/setup.bash
          colcon test --packages-select inspection-robot
          cat log/latest_test/inspection-robot/stdout_stderr.log
          find build/inspection-robot/ | grep -E 'gcda' # catch error -- expect to see .gcda files
          colcon test-result --test-result-base build/inspection-robot/ # catch error
      # Generate code coverage test report
      - name: Generate test coverage report
        run: |
          source install/setup.bash
          ros2 run inspection-robot generate_coverage_report.bash
      # Upload coverage result to CodeCov
      - name: Upload coverage result to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ${{github.workspace}}/install/inspection-robot/lib/inspection-robot/coverage_cleaned.info
          # flags: unittests # optional
          # directory: ${{github.workspace}}/install/
          # name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)


      # Run CMake to setup compilation flags
      # - name: Configure Coverage CMake
      #   run: cmake -D COVERAGE=ON -D CMAKE_BUILD_TYPE=Debug -B ${{github.workspace}}/build

      # Compile and executables
      # - name: Build Coverage
      #   working-directory: ${{github.workspace}}
      #   run: make

      # Run test suite and compute code coverage
      # - name: Run Test Coverage
      #   working-directory: ${{github.workspace}}
      #   run: make code_coverage

      # Upload coverage result to Coverage.io
      # - name: Upload result to Coveralls.io
      #   uses: coverallsapp/github-action@1.1.3
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     path-to-lcov: ${{github.workspace}}/build/coverage.info.cleaned